{{template "base" .}}

{{define "title"}}
    Virtual Terminal
{{end}}

{{define "content"}}

<h2 class="mt-3 text-center">Virtual Terminal</h2>

<hr />

<div class="alert alert-danger text-center d-none" id="card-messages"></div>

<form action="/payment-succeeded" method="post" name="charge-form" id="charge-form" class="d-block needs-validation charge-form" autocomplete="off" novalidate="">
    <div class="mb-3">
        <label for="amount" class="form-label">Amount</label>
        <input type="text" class="form-control" id="amount" name="amount" required="" autocomplete="amount-new" />
    </div>

    <div class="mb-3">
        <label for="cardholder-name" class="form-label">Cardholder name</label>
        <input type="text" class="form-control" id="cardholder-name" name="cardholder-name" required="" autocomplete="cardholder-name-new" />
    </div>

    <div class="mb-3">
        <label for="cardholder-email" class="form-label">Cardholder email</label>
        <input type="email" class="form-control" id="cardholder-email" name="cardholder-email" required="" autocomplete="cardholder-email-new" />
    </div>

    <div class="mb-3">
        <label for="card-element" class="form-label">Credit Card</label>
        <div id="card-element" class="form-control"></div>
        <div class="alert-danger text-center" id="card-errors" roler="alert"></div>
        <div class="alert-success text-center" id="card-success" roler="alert"></div>
    </div>

    <hr />

    <a href="javascript:void(0)" id="pay-button" class="btn btn-primary" onclick="validation()">Charge Card</a>

    <div id="processing-payment" class="text-center d-none">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    
    <input type="hidden" name="payment_intent" id="payment_intent" />
    <input type="hidden" name="payment_method" id="payment_method" />
    <input type="hidden" name="payment_amount" id="payment_amount" />
    <input type="hidden" name="payment_currency" id="payment_currency" />
</form>

{{end}}

{{define "js"}}
    <script src="https://js.stripe.com/v3/"></script>

    <script>
    let card
    let stripe = Stripe('pk_test_51LmPH9IUDEmPYYbAHKEtyAjX7qQk9C3blqSyLGCTSq7wGNp5sRC9rRt4x9efENZ5mLOiBPAIWqdbHQCuA7U8awK800nOspG953')
    const cardMessages = document.querySelector("#card-messages")
    const payButton = document.querySelector("#pay-button")
    const processing = document.querySelector("#processing-payment")

    function controlPayButton(shouldHide) {
        payButton.classList[shouldHide ? 'add' : 'remove']('d-none')
        processing.classList[shouldHide ? 'remove' : 'add']('d-none')
    }

    function showCardError(msg) {
        cardMessages.classList.add('alert-danger')
        cardMessages.classList.remove('d-none')
        cardMessages.classList.remove('alert-success')
        cardMessages.innerText = msg
    }

    function showCardSuccess(msg) {
        cardMessages.classList.add('alert-success')
        cardMessages.classList.remove('alert-danger')
        cardMessages.classList.remove('d-none')
        cardMessages.innerText = "Transaction success!"
    }

    function validation() {
        let form = document.querySelector("#charge-form")

        if (!form.checkValidity()) {
            this.event.preventDefault()
            this.event.stopPropagation()
            form.classList.add('was-validated')
            return
        }

        form.classList.remove('was-validated')

        controlPayButton(true)

        let amountToCharge = String(parseFloat(document.querySelector('#amount').value)* 100)

        let payload = {
            amount: amountToCharge,
            currency: 'BRL',
        }

        const requestOptions = {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-type': 'application/json',
            },
            body: JSON.stringify(payload),
        }

        fetch('http://localhost:4001/api/payment-intent', requestOptions)
            .then(response => response.text())
            .then(response => {
                let data
                
                try {
                    data = JSON.parse(response)
                    
                    stripe.confirmCardPayment(data.client_secret, {
                        payment_method: {
                            card: card,
                            billing_details: {
                                name: document.querySelector('#cardholder-name').value,
                            },
                        },
                    })
                    .then(result => {
                        if (result.error) {
                            showCardError(result.error.message)
                            controlPayButton(false)
                            return
                        }

                        if (result.paymentIntent) {
                            if (result.paymentIntent.status === 'succeeded') {
                                document.querySelector('#payment_intent').value = result.paymentIntent.id
                                document.querySelector('#payment_amount').value = result.paymentIntent.amount
                                document.querySelector('#payment_currency').value = result.paymentIntent.currency
                                document.querySelector('#payment_method').value = result.paymentIntent.payment_method_types[0]
                                processing.classList.add('d-none')
                                
                                showCardSuccess()

                                return
                            }
                        }
                    })
                } catch (error) {
                    console.log(error)
                    controlPayButton(false)
                    showCardError("Invalid response from payment gateway!")
                    return
                }
            })
    }

    (() => {
        const elements = stripe.elements()
        const styles = {
            base: {
                fontSize: '16px',
                lineHeight: '24px',
            }
        }

        card = elements.create('card', {
            style: styles,
            hidePostalCode: true,
        })

        card.mount('#card-element')

        card.addEventListener('change', (event) => {
            let displayError = document.querySelector("#card-errors")
            let displaySuccess = document.querySelector("#card-Success")

            if (event.error) {
                displayError.classList.remove('d-none')
                displayError.textContent = event.error.message
                return
            }

            displayError.classList.add('d-none')
            displayError.textContent = ''

            return
        })
    })()
    </script>
{{end}}